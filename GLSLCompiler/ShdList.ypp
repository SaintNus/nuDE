/*!
 * \file ShdList.ypp
 * \brief Shader list compiler.
 * \author Nus
 * \date 2011/12/25 21:24
 */

%{

#include "Settings.h"
#include "Utility.h"
#include "StringTable.h"
#include "ShaderList.h"

extern "C"
{

int yywrap(void);
int yylex(void);

void yyset_in(FILE* in_str);
FILE* yyget_in(void);
int yyget_lineno(void);

}

#if defined(DEBUG)
extern "C" void yyset_debug(int debug_flag);
extern int yydebug;
#endif
 
%}

%token PREPROCESSOR
%token PROGRAM
%token VERTEX_SHADER
%token VERTEX_PREPROCESSOR
%token FRAGMENT_SHADER
%token FRAGMENT_PREPROCESSOR

%token STRING

%token QUOTE
%token EQUAL

%token COLON
%token COMMA
%token SEMI_COLON

%token OPEN_BRACE
%token CLOSE_BRACE
%token OPEN_BRACKET
%token CLOSE_BRACKET

%%

start:
  // Empty.
  |
  start global_statement
  ;

global_statement:
  PROGRAM bracketed_name OPEN_BRACE statements CLOSE_BRACE
  {
    ShaderList::getProgramScratch()->setName(StringTable::getString($2)->lineNo(),
                                             StringTable::getString($2)->string());
    ShaderList::instance()->addProgram(ShaderList::getProgramScratch());
    ShaderList::setProgramScratch(nullptr);
  }
  |
  PREPROCESSOR COLON preprocessors SEMI_COLON
  {
    ShaderList::instance()->addGlobalPreproc(ShaderList::getPreprocScratch());
    ShaderList::setPreprocScratch(nullptr);
  }
  ;

preprocessors:
  // Empty.
  |
  preprocessors COMMA definition
  |
  preprocessors definition
  ;

definition:
  STRING EQUAL STRING
  {
    const char* def = StringTable::getString($1)->string();
    const char* value = StringTable::getString($3)->string();
    ShaderList::addPreprocScratch(new PreProcessor(StringTable::getString($1)->lineNo(),
                                                   def,
                                                   value));
  }
  |
  STRING
  {
    const char* def = StringTable::getString($1)->string();
    ShaderList::addPreprocScratch(new PreProcessor(StringTable::getString($1)->lineNo(),
                                                   def));
  }
  ;

quoted_name:
  QUOTE STRING QUOTE
  {
    $$ = $2;
  }
  ;

statements:
  |
  statements statement
  ;

statement:
  VERTEX_SHADER COLON quoted_name SEMI_COLON
  {
    Shader* p_shd = ShaderList::getProgramScratch()->createVertexShader();
    p_shd->setFileName(StringTable::getString($3)->lineNo(),
                       StringTable::getString($3)->string());
  }
  |
  FRAGMENT_SHADER COLON quoted_name SEMI_COLON
  {
    Shader* p_shd = ShaderList::getProgramScratch()->createFragmentShader();
    p_shd->setFileName(StringTable::getString($3)->lineNo(),
                       StringTable::getString($3)->string());
  }
  |
  PREPROCESSOR COLON preprocessors SEMI_COLON
  {
    ShaderList::getProgramScratch()->addPreproc(ShaderList::getPreprocScratch());
    ShaderList::setPreprocScratch(nullptr);
  }
  |
  VERTEX_PREPROCESSOR COLON preprocessors SEMI_COLON
  {
    Shader* p_shd = ShaderList::getProgramScratch()->createVertexShader();
    p_shd->addPreproc(ShaderList::getPreprocScratch());
    ShaderList::setPreprocScratch(nullptr);
  }
  |
  FRAGMENT_PREPROCESSOR COLON preprocessors SEMI_COLON
  {
    Shader* p_shd = ShaderList::getProgramScratch()->createFragmentShader();
    p_shd->addPreproc(ShaderList::getPreprocScratch());
    ShaderList::setPreprocScratch(nullptr);
  }
  ;

bracketed_name:
  OPEN_BRACKET STRING CLOSE_BRACKET
  {
    $$ = $2;
  }
  ;

%%

int yywrap(void)
{
  // Do not wrap...
  return 1;
} 
  
int main(int argc, const char** argv)
{
  Settings setting(argc, argv);

#if defined(DEBUG)
  yydebug = setting.isDebug() ? 1 : 0;
  yyset_debug(yydebug);
#endif

  if(setting.isVersion() || setting.isVerbose() || setting.isHelp())
    fprintf(stdout, "GLSL Property Compiler - %s\nVersion 1.0\n", _CONFIGURATION_);

  if(setting.isVersion())
    return ErrorAppStartup;

  if(setting.isHelp()) {
    fprintf(stdout, "Usage: glslpc [ --output-file=file_name ] [ --force-write ]\n");
    fprintf(stdout, "              [ --intermediate-dir=directory ] [ --verbose ]\n");
    fprintf(stdout, "              [ --namespace=namespace ]\n");
    fprintf(stdout, "              input_file\n");
    fprintf(stdout, "       glslpc --version\n");
    fprintf(stdout, "       glslpc --help\n");
    return ErrorAppStartup;
  }

  if(!setting.isValid()) {
    fprintf(stdout, "Invalid argument(s).\n");
    return ErrorAppStartup;
  }

  {
    FILE* file = fopen(setting.getInputName(), "rb");

    if(!file) {
      fprintf(stderr, "Critical error: cannot open \"%s\".\n", setting.getInputName());
      return ErrorIO;
    }

    yyset_in(file);
  }

  if(!setting.isForceWrite()) {
    int ret = ErrorNone;
    char buffer[PATH_MAX];
    FILE* file = nullptr;

    snprintf(buffer, PATH_MAX, "%s.temp", setting.getOutputName());
    buffer[PATH_MAX - 1] = 0x00;
    file = fopen(buffer, "rb");
    if(file) {
      fprintf(stderr, "Critical error: Cannot write temporary file \"%s\".\n", buffer);
      fclose(file);
      ret = ErrorIO;
    }
  }

  {
    int ret = ErrorNone;
    char buffer[PATH_MAX];
    FILE* file = nullptr;

    snprintf(buffer, PATH_MAX, "%s.temp", setting.getOutputName());
    buffer[PATH_MAX - 1] = 0x00;

    if(MakePath(buffer)) {
      fprintf(stderr, "Critical error: Create path to \"%s\".\n", buffer);
      return ErrorFileSystem;
    }

    file = fopen(buffer, "w");
    if(file) {
      const char* p_file_name = strrchr(setting.getOutputName(), '/');

      if(p_file_name)
        p_file_name++;
      else
        p_file_name = setting.getOutputName();

      SetOutputHeader(file);

      fprintf(file, "/*\n");
      fprintf(file, " * Shader list information header.\n");
      fprintf(file, " * This file is automatically generated, do not edit.\n");
      fprintf(file, " */\n\n");

      {
        char safe_pproc[256];
        snprintf(safe_pproc, 256, "__Generated_%s__", p_file_name);
        safe_pproc[255] = 0x00;
        const char* valid_ch = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
        size_t valid_ch_len = strlen(valid_ch);
        for(char* pc = safe_pproc; *pc != 0x00; pc++) {
          bool valid = false;
          for(size_t ui = 0; ui < valid_ch_len; ui++) {
            if(*pc == valid_ch[ui]) {
              valid = true;
              break;
            }
          }
          if(!valid)
            *pc = '_';
        }
        fprintf(file, "#ifndef %s\n", safe_pproc);
        fprintf(file, "#define %s\n\n", safe_pproc);
      }
    } else {
      fprintf(stderr, "Critical error: Cannot write to \"%s\".\n", buffer);
      ret = ErrorIO;
    }

    if(ret != ErrorNone) {
      if(OutputHeader()) {
        fclose(OutputHeader());
        SetOutputHeader(nullptr);
      }
      return ret;
    }
  }

  {
    char buffer[PATH_MAX];

    strncpy(buffer, setting.getIntermediateDir(), PATH_MAX);
    buffer[PATH_MAX - 1] = '\0';
    if(buffer[strlen(buffer) - 1] != '/') {
      size_t len = strlen(buffer) + 1;
      if(len < PATH_MAX) {
        buffer[len - 1] = '/';
        buffer[len] = '\0';
      } else {
        fprintf(stderr, "Critical error: Cannot create intermediate directory.\n");
        return ErrorFileSystem;
      }
    }

    if(MakePath(buffer)) {
      fprintf(stderr, "Critical error: Cannot create intermediate directory.\n");
      return ErrorFileSystem;
    }
  }

  ShaderList::createInstance();

  yyparse();

  fclose(yyget_in());
  yyset_in(nullptr);

  if(yyget_iserror()) {
    ShaderList::deleteInstance();
    return ErrorShdListParse;
  }

  if(setting.isVerbose())
    DumpList();

  int ret = BuildList(setting.getIntermediateDir(),
                      setting.getNamespace(),
                      setting.getVersion());
  fprintf(OutputHeader(), "\n#endif\n");
  fclose(OutputHeader());
  SetOutputHeader(nullptr);

  if(ret == ErrorNone) {
    int ret = ErrorNone;
    char buffer[PATH_MAX];
    FILE* file_temp = nullptr;
    FILE* file_dest = nullptr;

    snprintf(buffer, PATH_MAX, "%s.temp", setting.getOutputName());
    buffer[PATH_MAX - 1] = 0x00;
    file_temp = fopen(buffer, "rb");

    snprintf(buffer, PATH_MAX, "%s", setting.getOutputName());
    buffer[PATH_MAX - 1] = 0x00;
    file_dest = fopen(buffer, "rb");

    if(file_temp && file_dest) {
      size_t size_temp = 0;
      size_t size_dest = 0;
      bool difference = false;

      fseek(file_dest, 0, SEEK_END);
      size_dest = ftell(file_dest);
      rewind(file_dest);

      fseek(file_temp, 0, SEEK_END);
      size_temp = ftell(file_temp);
      rewind(file_temp);

      if(size_dest == size_temp) {
        void* buffer_dest = malloc(size_dest);
        void* buffer_temp = malloc(size_temp);

        if(buffer_dest && buffer_temp) {
          fread(buffer_dest, sizeof(char), size_dest, file_dest);
          fread(buffer_temp, sizeof(char), size_temp, file_temp);

          difference = (memcmp(buffer_dest, buffer_temp, size_dest) != 0);
        } else {
          fprintf(stderr, "Critical error: Insufficient memory.\n");
          ret = ErrorMemory;
        }

        if(buffer_dest)
          free(buffer_dest);
        if(buffer_temp)
          free(buffer_temp);
      } else {
        difference = true;
      }

      if(difference && ret == ErrorNone) {
        if(setting.isForceWrite()) {
          rewind(file_temp);

          fclose(file_dest);
          file_dest = fopen(buffer, "wb");

          if(file_dest) {
            void* buffer_temp = malloc(size_temp);

            if(buffer_temp) {
              if(fread(buffer_temp, sizeof(char), size_temp, file_temp) != size_temp) {
                fprintf(stderr, "Critical error: Error reading \"%s.temp\".\n", setting.getOutputName());
                ret = ErrorIO;
              }
              if(ret == ErrorNone && fwrite(buffer_temp, sizeof(char), size_temp, file_dest) != size_temp)  {
                fprintf(stderr, "Critical error: Error writing \"%s\".\n", buffer);
                ret = ErrorIO;
              }
              
              free(buffer_temp);
            } else {
              fprintf(stderr, "Critical error: Insufficient memory.\n");
              ret = ErrorMemory;
            }
          } else {
            fprintf(stderr, "Critical error: Cannot overwrite output file \"%s\".\n", buffer);
            fprintf(stderr, "Try using --force-write to force writing.\n");
            ret = ErrorIO;
          }
        }
      }

      if(file_dest)
        fclose(file_dest);
      if(file_temp)
        fclose(file_temp);
    } else if(file_temp && !file_dest) {
      size_t size_temp = 0;

      fseek(file_temp, 0, SEEK_END);
      size_temp = ftell(file_temp);
      rewind(file_temp);

      file_dest = fopen(buffer, "wb");

      if(file_dest) {
        void* buffer_temp = malloc(size_temp);

        if(fread(buffer_temp, sizeof(char), size_temp, file_temp) != size_temp) {
          fprintf(stderr, "Critical error: Error reading \"%s.temp\".\n", setting.getOutputName());
          ret = ErrorIO;
        }
        if(ret == ErrorNone && fwrite(buffer_temp, sizeof(char), size_temp, file_dest) != size_temp)  {
          fprintf(stderr, "Critical error: Error writing \"%s\".\n", buffer);
          ret = ErrorIO;
        }
        
        free(buffer_temp);
      } else {
        fprintf(stderr, "Critical error: Cannot write output file \"%s\".\n", buffer);
        ret = ErrorIO;
      }

      if(file_dest)
        fclose(file_dest);
      if(file_temp)
        fclose(file_temp);
    } else {
      if(file_dest) {
        fclose(file_dest);
      } else {
        fprintf(stderr, "Critical error: Cannot open output file \"%s\".\n", setting.getOutputName());
      }

      if(file_temp) {
        fclose(file_temp);
      } else {
        fprintf(stderr, "Critical error: Cannot open temporary output file \"%s.temp\".\n", setting.getOutputName());
      }
    }

    snprintf(buffer, PATH_MAX, "%s.temp", setting.getOutputName());
    buffer[PATH_MAX - 1] = 0x00;
    if(remove(buffer) != 0)
      fprintf(stderr, "Warning: Cannot remove temporary output file \"%s\".\n", buffer);
  } else {
    fprintf(stderr, "Critical error: Cannot create temporary output file.\n");
  }

  ShaderList::deleteInstance();

  return ret;
}
