/*!
 * \file nuGraphics.h
 * \brief Graphics.
 * \author Nus
 * \date 2012/05/03 18:45
 */

#ifndef __NUGRAPHICS_H__
#define __NUGRAPHICS_H__

namespace nude {

  enum PASS {
    PASS_OPAQUE = 0,
    PASS_TRANSPARENCY,
    PASS_DRAW_2D,
  };

  enum PRIMITIVE_MODE {
    POINTS = 0,

    LINE_STRIP,
    LINE_LOOP,
    LINE_LINES,

    TRIANGLE_STRIP,
    TRIANGLE_FAN,
    TRIANGLES,
    
    LINES_ADJACENCY,
    LINE_STRIP_ADJACENCY,
    TRIANGLES_ADJACENCY,
    TRIANGLE_STRIP_ADJACENCY,
  };

  enum CLEAR_BIT {
    CLEAR_COLOR = GL_COLOR_BUFFER_BIT,
    CLEAR_DEPTH = GL_DEPTH_BUFFER_BIT,
    CLEAR_STENCIL = GL_STENCIL_BUFFER_BIT,
  };

  enum DEPTHSTENCIL_FUNC {
    DEPTHSTENCIL_NEVER = GL_NEVER,
    DEPTHSTENCIL_ALWAYS = GL_ALWAYS,
    DEPTHSTENCIL_LESS = GL_LESS,
    DEPTHSTENCIL_LEQUAL = GL_LEQUAL,
    DEPTHSTENCIL_EQUAL = GL_EQUAL,
    DEPTHSTENCIL_GREATER = GL_GREATER,
    DEPTHSTENCIL_GEQUAL = GL_GEQUAL,
    DEPTHSTENCIL_NOTEQUAL = GL_NOTEQUAL,
  };

  enum POLYGON_FACE {
    POLYGON_FRONT = GL_FRONT,
    POLYGON_BACK = GL_BACK,
    POLYGON_FRONT_AND_BACK = GL_FRONT_AND_BACK,
  };

  enum STENCIL_OP {
    STENCIL_KEEP = GL_KEEP,
    STENCIL_ZERO = GL_ZERO,
    STENCIL_REPLACE = GL_REPLACE,
    STENCIL_INCR = GL_INCR,
    STENCIL_DECR = GL_DECR,
    STENCIL_INVERT = GL_INVERT,
    STENCIL_INCR_WRAP = GL_INCR_WRAP,
    STENCIL_DECR_WRAP = GL_DECR_WRAP,
  };

  enum BLEND_EQ_FUNC {
    BLEND_EQ_ADD = GL_FUNC_ADD,
    BLEND_EQ_SUBTRACT = GL_FUNC_SUBTRACT,
    BLEND_EQ_REVERSE_SUBTRACT = GL_FUNC_REVERSE_SUBTRACT,
    BLEND_EQ_MIN = GL_MIN,
    BLEND_EQ_MAX = GL_MAX,
  };

  enum BLEND_FUNC {
    BLEND_ZERO = GL_ZERO,
    BLEND_ONE = GL_ONE,
    BLEND_SRC_COLOR = GL_SRC_COLOR,
    BLEND_ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR,
    BLEND_DST_COLOR = GL_DST_COLOR,
    BLEND_ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR,
    BLEND_SRC_ALPHA = GL_SRC_ALPHA,
    BLEND_ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
    BLEND_DST_ALPHA = GL_DST_ALPHA,
    BLEND_ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
    BLEND_CONSTANT_COLOR = GL_CONSTANT_COLOR,
    BLEND_ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR,
    BLEND_CONSTANT_ALPHA = GL_CONSTANT_ALPHA,
    BLEND_ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA,
  };

  enum FRONT_FACE {
    FRONT_COUNTER_CLOCKWISE = GL_CCW,
    FRONT_CLOCKWISE = GL_CW,
  };

  enum CULL_FACE {
    CULL_FRONT = GL_FRONT,
    CULL_BACK = GL_BACK,
    CULL_FRONT_AND_BACK = GL_FRONT_AND_BACK,
  };

  enum PIXEL_FORMAT {
    PIXEL_UBYTE,
    PIXEL_UBYTE_BGRA,
    PIXEL_UBYTE_RGB,
    PIXEL_BYTE,
    PIXEL_BYTE_BGRA,
    PIXEL_BYTE_RGB,
    PIXEL_USHORT,
    PIXEL_USHORT_BGRA,
    PIXEL_USHORT_RGB,
    PIXEL_SHORT,
    PIXEL_SHORT_BGRA,
    PIXEL_SHORT_RGB,
    PIXEL_UINT,
    PIXEL_UINT_BGRA,
    PIXEL_UINT_RGB,
    PIXEL_INT,
    PIXEL_INT_BGRA,
    PIXEL_INT_RGB,
    PIXEL_FLOAT,
    PIXEL_FLOAT_BGRA,
    PIXEL_FLOAT_RGB,
    PIXEL_UBYTE_3_3_2,
    PIXEL_UBYTE_2_3_3_REV,
    PIXEL_USHORT_5_6_5,
    PIXEL_USHORT_5_6_5_REV,
    PIXEL_USHORT_4_4_4_4,
    PIXEL_USHORT_BGRA_4_4_4_4,
    PIXEL_USHORT_4_4_4_4_REV,
    PIXEL_USHORT_BGRA_4_4_4_4_REV,
    PIXEL_USHORT_5_5_5_1,
    PIXEL_USHORT_BGRA_5_5_5_1,
    PIXEL_USHORT_1_5_5_5_REV,
    PIXEL_USHORT_BGRA_1_5_5_5_REV,
    PIXEL_UINT_8_8_8_8,
    PIXEL_UINT_BGRA_8_8_8_8,
    PIXEL_UINT_8_8_8_8_REV,
    PIXEL_UINT_BGRA_8_8_8_8_REV,
    PIXEL_UINT_10_10_10_2,
    PIXEL_UINT_BGRA_10_10_10_2,
    PIXEL_UINT_2_10_10_10_REV,
    PIXEL_UINT_BGRA_2_10_10_10_REV,
    PIXEL_FORMAT_NUM,

    PIXEL_OPTIMAL_HIGH_PRECISION = PIXEL_UINT_BGRA_8_8_8_8_REV,
    PIXEL_OPTIMAL_LOW_PRECISION = PIXEL_USHORT_BGRA_1_5_5_5_REV,    
  };

  enum WRAP_TEXTURE {
    WRAP_CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
    WRAP_REPEAT = GL_REPEAT,
    WRAP_CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
    WRAP_MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
  };

  enum FILTER_TEXTURE {
    FILTER_NEAREST = GL_NEAREST,
    FILTER_LINEAR = GL_LINEAR,
    FILTER_NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
    FILTER_NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
    FILTER_LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
    FILTER_LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR,
  };

  enum RENDERBUFFER_FORMAT {
    RENDERBUFFER_R8 = GL_R8,
    RENDERBUFFER_R8I = GL_R8I,
    RENDERBUFFER_R8UI = GL_R8UI,

    RENDERBUFFER_R16 = GL_R16,
    RENDERBUFFER_R16I = GL_R16I,
    RENDERBUFFER_R16UI = GL_R16UI,
    RENDERBUFFER_R16F = GL_R16F,

    RENDERBUFFER_R32I = GL_R32I,
    RENDERBUFFER_R32UI = GL_R32UI,
    RENDERBUFFER_R32F = GL_R32F,

    RENDERBUFFER_RG8 = GL_RG8,
    RENDERBUFFER_RG8I = GL_RG8I,
    RENDERBUFFER_RG8UI = GL_RG8UI,

    RENDERBUFFER_RG16 = GL_RG16,
    RENDERBUFFER_RG16F = GL_RG16F,
    RENDERBUFFER_RG16I = GL_RG16I,
    RENDERBUFFER_RG16UI = GL_RG16UI,

    RENDERBUFFER_RG32F = GL_RG32F,
    RENDERBUFFER_RG32I = GL_RG32I,
    RENDERBUFFER_RG32UI = GL_RG32UI,

    RENDERBUFFER_R11F_G11F_B10F = GL_R11F_G11F_B10F,

    RENDERBUFFER_RGB10_A2 = GL_RGB10_A2,

    RENDERBUFFER_RGBA8 = GL_RGBA8,
    RENDERBUFFER_RGBA8I = GL_RGBA8I,
    RENDERBUFFER_RGBA8UI = GL_RGBA8UI,

    RENDERBUFFER_SRGB8_A8 = GL_SRGB8_ALPHA8,

    RENDERBUFFER_RGBA16 = GL_RGBA16,
    RENDERBUFFER_RGBA16F = GL_RGBA16F,
    RENDERBUFFER_RGBA16I = GL_RGBA16I,
    RENDERBUFFER_RGBA16UI = GL_RGBA16UI,

    RENDERBUFFER_RGBA32F = GL_RGBA32F,
    RENDERBUFFER_RGBA32I = GL_RGBA32I,
    RENDERBUFFER_RGBA32UI = GL_RGBA32UI,

    RENDERBUFFER_DEPTH_COMPONENT16 = GL_DEPTH_COMPONENT16,
    RENDERBUFFER_DEPTH_COMPONENT24 = GL_DEPTH_COMPONENT24,
    RENDERBUFFER_DEPTH_COMPONENT32F = GL_DEPTH_COMPONENT32F,

    RENDERBUFFER_DEPTH24_STENCIL8 = GL_DEPTH24_STENCIL8,
    RENDERBUFFER_DEPTH32F_STENCIL8 = GL_DEPTH32F_STENCIL8,
  };

  enum TEXTUREBUFFER_FORMAT {
    TEXTUREBUFFER_R8,
    TEXTUREBUFFER_R8I,
    TEXTUREBUFFER_R8UI,
    TEXTUREBUFFER_R8_SNORM,

    TEXTUREBUFFER_R16,
    TEXTUREBUFFER_R16I,
    TEXTUREBUFFER_R16UI,
    TEXTUREBUFFER_R16F,
    TEXTUREBUFFER_R16_SNORM,

    TEXTUREBUFFER_R32I,
    TEXTUREBUFFER_R32UI,
    TEXTUREBUFFER_R32F,

    TEXTUREBUFFER_COMPRESSED_RED_RGTC1,
    TEXTUREBUFFER_COMPRESSED_SIGNED_RED_RGTC2,

    TEXTUREBUFFER_RG8,
    TEXTUREBUFFER_RG8I,
    TEXTUREBUFFER_RG8UI,
    TEXTUREBUFFER_RG8_SNORM,

    TEXTUREBUFFER_RG16,
    TEXTUREBUFFER_RG16F,
    TEXTUREBUFFER_RG16I,
    TEXTUREBUFFER_RG16UI,
    TEXTUREBUFFER_RG16_SNORM,

    TEXTUREBUFFER_RG32F,
    TEXTUREBUFFER_RG32I,
    TEXTUREBUFFER_RG32UI,

    TEXTUREBUFFER_COMPRESSED_RG_RGTC2,
    TEXTUREBUFFER_COMPRESSED_SIGNED_RG_RGTC2,

    TEXTUREBUFFER_RGB9_E5,

    TEXTUREBUFFER_SRGB8,
    TEXTUREBUFFER_RGB8,
    TEXTUREBUFFER_RGB8I,
    TEXTUREBUFFER_RGB8UI,
    TEXTUREBUFFER_RGB8_SNORM,

    TEXTUREBUFFER_RGB16,
    TEXTUREBUFFER_RGB16F,
    TEXTUREBUFFER_RGB16I,
    TEXTUREBUFFER_RGB16UI,
    TEXTUREBUFFER_RGB16_SNORM,

    TEXTUREBUFFER_R11F_G11F_B10F,

    TEXTUREBUFFER_RGB32F,
    TEXTUREBUFFER_RGB32I,
    TEXTUREBUFFER_RGB32UI,

    TEXTUREBUFFER_RGB10_A2,

    TEXTUREBUFFER_SRGB8_A8,

    TEXTUREBUFFER_RGBA8_SNORM,

    TEXTUREBUFFER_RGBA16,
    TEXTUREBUFFER_RGBA16F,
    TEXTUREBUFFER_RGBA16I,
    TEXTUREBUFFER_RGBA16UI,
    TEXTUREBUFFER_RGBA16_SNORM,

    TEXTUREBUFFER_RGBA32F,
    TEXTUREBUFFER_RGBA32I,
    TEXTUREBUFFER_RGBA32UI,

    TEXTUREBUFFER_DEPTH_COMPONENT16,
    TEXTUREBUFFER_DEPTH_COMPONENT24,
    TEXTUREBUFFER_DEPTH_COMPONENT32F,

    TEXTUREBUFFER_DEPTH24_STENCIL8,
    TEXTUREBUFFER_DEPTH32F_STENCIL8,

    TEXTUREBUFFER_FORMAT_NUM,
  };

}

#endif
