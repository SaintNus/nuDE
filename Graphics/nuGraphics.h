/*!
 * \file nuGraphics.h
 * \brief Graphics.
 * \author Nus
 * \date 2012/05/03 18:45
 */

#ifndef __NUGRAPHICS_H__
#define __NUGRAPHICS_H__

namespace nude {

  enum PASS {
    PASS_OPAQUE = 0,
    PASS_TRANSPARENCY,
    PASS_DRAW_2D,
  };

  enum PRIMITIVE_MODE {
    POINTS = 0,

    LINE_STRIP,
    LINE_LOOP,
    LINE_LINES,

    TRIANGLE_STRIP,
    TRIANGLE_FAN,
    TRIANGLES,
    
    LINES_ADJACENCY,
    LINE_STRIP_ADJACENCY,
    TRIANGLES_ADJACENCY,
    TRIANGLE_STRIP_ADJACENCY,
  };

  enum CLEAR_BIT {
    CLEAR_COLOR = GL_COLOR_BUFFER_BIT,
    CLEAR_DEPTH = GL_DEPTH_BUFFER_BIT,
    CLEAR_STENCIL = GL_STENCIL_BUFFER_BIT,
  };

  enum DEPTHSTENCIL_FUNC {
    DEPTHSTENCIL_NEVER = GL_NEVER,
    DEPTHSTENCIL_ALWAYS = GL_ALWAYS,
    DEPTHSTENCIL_LESS = GL_LESS,
    DEPTHSTENCIL_LEQUAL = GL_LEQUAL,
    DEPTHSTENCIL_EQUAL = GL_EQUAL,
    DEPTHSTENCIL_GREATER = GL_GREATER,
    DEPTHSTENCIL_GEQUAL = GL_GEQUAL,
    DEPTHSTENCIL_NOTEQUAL = GL_NOTEQUAL,
  };

  enum POLYGON_FACE {
    POLYGON_FRONT = GL_FRONT,
    POLYGON_BACK = GL_BACK,
    POLYGON_FRONT_AND_BACK = GL_FRONT_AND_BACK,
  };

  enum STENCIL_OP {
    STENCIL_KEEP = GL_KEEP,
    STENCIL_ZERO = GL_ZERO,
    STENCIL_REPLACE = GL_REPLACE,
    STENCIL_INCR = GL_INCR,
    STENCIL_DECR = GL_DECR,
    STENCIL_INVERT = GL_INVERT,
    STENCIL_INCR_WRAP = GL_INCR_WRAP,
    STENCIL_DECR_WRAP = GL_DECR_WRAP,
  };

  enum BLEND_EQ_FUNC {
    BLEND_EQ_ADD = GL_FUNC_ADD,
    BLEND_EQ_SUBTRACT = GL_FUNC_SUBTRACT,
    BLEND_EQ_REVERSE_SUBTRACT = GL_FUNC_REVERSE_SUBTRACT,
    BLEND_EQ_MIN = GL_MIN,
    BLEND_EQ_MAX = GL_MAX,
  };

  enum BLEND_FUNC {
    BLEND_ZERO = GL_ZERO,
    BLEND_ONE = GL_ONE,
    BLEND_SRC_COLOR = GL_SRC_COLOR,
    BLEND_ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR,
    BLEND_DST_COLOR = GL_DST_COLOR,
    BLEND_ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR,
    BLEND_SRC_ALPHA = GL_SRC_ALPHA,
    BLEND_ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
    BLEND_DST_ALPHA = GL_DST_ALPHA,
    BLEND_ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
    BLEND_CONSTANT_COLOR = GL_CONSTANT_COLOR,
    BLEND_ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR,
    BLEND_CONSTANT_ALPHA = GL_CONSTANT_ALPHA,
    BLEND_ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA,
  };

  enum FRONT_FACE {
    FRONT_COUNTER_CLOCKWISE = GL_CCW,
    FRONT_CLOCKWISE = GL_CW,
  };

  enum CULL_FACE {
    CULL_FRONT = GL_FRONT,
    CULL_BACK = GL_BACK,
    CULL_FRONT_AND_BACK = GL_FRONT_AND_BACK,
  };

  enum PIXEL_FORMAT {
    PIXEL_UBYTE,
    PIXEL_UBYTE_BGRA,
    PIXEL_UBYTE_RGB,
    PIXEL_BYTE,
    PIXEL_BYTE_BGRA,
    PIXEL_BYTE_RGB,
    PIXEL_USHORT,
    PIXEL_USHORT_BGRA,
    PIXEL_USHORT_RGB,
    PIXEL_SHORT,
    PIXEL_SHORT_BGRA,
    PIXEL_SHORT_RGB,
    PIXEL_UINT,
    PIXEL_UINT_BGRA,
    PIXEL_UINT_RGB,
    PIXEL_INT,
    PIXEL_INT_BGRA,
    PIXEL_INT_RGB,
    PIXEL_FLOAT,
    PIXEL_FLOAT_BGRA,
    PIXEL_FLOAT_RGB,
    PIXEL_UBYTE_3_3_2,
    PIXEL_UBYTE_2_3_3_REV,
    PIXEL_USHORT_5_6_5,
    PIXEL_USHORT_5_6_5_REV,
    PIXEL_USHORT_4_4_4_4,
    PIXEL_USHORT_BGRA_4_4_4_4,
    PIXEL_USHORT_4_4_4_4_REV,
    PIXEL_USHORT_BGRA_4_4_4_4_REV,
    PIXEL_USHORT_5_5_5_1,
    PIXEL_USHORT_BGRA_5_5_5_1,
    PIXEL_USHORT_1_5_5_5_REV,
    PIXEL_USHORT_BGRA_1_5_5_5_REV,
    PIXEL_UINT_8_8_8_8,
    PIXEL_UINT_BGRA_8_8_8_8,
    PIXEL_UINT_8_8_8_8_REV,
    PIXEL_UINT_BGRA_8_8_8_8_REV,
    PIXEL_UINT_10_10_10_2,
    PIXEL_UINT_BGRA_10_10_10_2,
    PIXEL_UINT_2_10_10_10_REV,
    PIXEL_UINT_BGRA_2_10_10_10_REV,
    PIXEL_FORMAT_NUM,

    PIXEL_OPTIMAL_HIGH_PRECISION = PIXEL_UINT_BGRA_8_8_8_8_REV,
    PIXEL_OPTIMAL_LOW_PRECISION = PIXEL_USHORT_BGRA_1_5_5_5_REV,    
  };

  enum WRAP_TEXTURE {
    WRAP_CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
    WRAP_REPEAT = GL_REPEAT,
    WRAP_CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
    WRAP_MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
  };

  enum FILTER_TEXTURE {
    FILTER_NEAREST = GL_NEAREST,
    FILTER_LINEAR = GL_LINEAR,
    FILTER_NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
    FILTER_NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
    FILTER_LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
    FILTER_LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR,
  };

}

#endif
